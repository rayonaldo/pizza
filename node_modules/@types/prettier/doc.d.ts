import { Doc } from './';

// https://github.com/prettier/prettier/blob/main/src/document/index.js

export namespace builders {
    type DocCommand =
        | Align
        | BreakParent
        | Concat
        | Cursor
        | Fill
        | Group
        | IfBreak
        | Indent
        | IndentIfBreak
        | Label
        | Line
        | LineSuffix
        | LineSuffixBoundary
        | Trim;
    type Doc = string | Doc[] | DocCommand;

    interface Align {
        type: 'align';
        contents: Doc;
        n: number | string | { type: 'root' };
    }

    interface BreakParent {
        type: 'break-parent';
    }

    interface Concat {
        type: 'concat';
        parts: Doc[];
    }

    interface Cursor {
        type: 'cursor';
        placeholder: symbol;
    }

    interface Fill {
        type: 'fill';
        parts: Doc[];
    }

    interface Group {
        type: 'group';
        contents: Doc;
        break: boolean;
        expandedStates: Doc[];
    }

    interface HardlineWithoutBreakParent extends Line {
        hard: true;
    }

    interface IfBreak {
        type: 'if-break';
        breakContents: Doc;
        flatContents: Doc;
    }

    interface Indent {
        type: 'indent';
        contents: Doc;
    }

    interface IndentIfBreak {
        type: 'indent-if-break';
    }

    interface Label {
        type: 'label';
    }

    interface Line {
        type: 'line';
        soft?: boolean | undefined;
        hard?: boolean | undefined;
        literal?: boolean | undefined;
    }

    interface LineSuffix {
        type: 'line-suffix';
        contents: Doc;
    }

    interface LineSuffixBoundary {
        type: 'line-suffix-boundary';
    }

    interface LiterallineWithoutBreakParent extends Line {
        hard: true;
        literal: true;
    }

    interface Softline extends Line {
        soft: true;
    }

    interface Trim {
        type: 'trim';
    }

    interface GroupOptions {
        shouldBreak?: boolean | undefined;
        id?: symbol | undefined;
    }

    function addAlignmentToDoc(doc: Doc, size: number, tabWidth: number): Doc;
    /** @see [align](https://github.com/prettier/prettier/blob/main/commands.md#align) */
    function align(widthOrString: Align['n'], doc: Doc): Align;
    /** @see [breakParent](https://github.com/prettier/prettier/blob/main/commands.md#breakparent) */
    const breakParent: BreakParent;
    /**
     * @see [concat](https://github.com/prettier/prettier/blob/main/commands.md#deprecated-concat)
     * @deprecated use `Doc[]` instead
     */
    function concat(docs: Doc[]): Concat;
    /** @see [conditionalGroup](https://github.com/prettier/prettier/blob/main/commands.md#conditionalgroup) */
    function conditionalGroup(alternatives: Doc[], options?: GroupOptions): Group;
    /** @see [dedent](https://github.com/prettier/prettier/blob/main/commands.md#dedent) */
    function dedent(doc: Doc): Align;
    /** @see [dedentToRoot](https://github.com/prettier/prettier/blob/main/commands.md#dedenttoroot) */
    function dedentToRoot(doc: Doc): Align;
    /** @see [fill](https://github.com/prettier/prettier/blob/main/commands.md#fill) */
    function fill(docs: Doc[]): Fill;
    /** @see [group](https://github.com/prettier/prettier/blob/main/commands.md#group) */
    function group(doc: Doc, opts?: GroupOptions): Group;
    /** @see [hardline](https://github.com/prettier/prettier/blob/main/commands.md#hardline) */
    const hardline: Concat;
    /** @see [hardlineWithoutBreakParent](https://github.com/prettier/prettier/blob/main/commands.md#hardlinewithoutbreakparent-and-literallinewithoutbreakparent) */
    const hardlineWithoutBreakParent: HardlineWithoutBreakParent;
    /** @see [ifBreak](https://github.com/prettier/prettier/blob/main/commands.md#ifbreak) */
    function ifBreak(ifBreak: Doc, noBreak?: Doc, options?: { groupId?: symbol | undefined }): IfBreak;
    /** @see [indent](https://github.com/prettier/prettier/blob/main/commands.md#indent) */
    function indent(doc: Doc): Indent;
    /** @see [indent